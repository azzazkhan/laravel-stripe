<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Casts\Attribute;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

/**
 * Remember to not use the `HasUlid` concern as it will override the
 * transaction secret generated by the checkout process which is needed to
 * verify the authenticity of checkout session's success redirection!
 */
class Transaction extends Model
{
    use HasFactory;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<string>
     */
    protected $fillable = [];

    /**
     * The attributes that should be cast.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'amount' => 'integer',
        'received' => 'integer',
        'fee' => 'integer',
        'metadata' => 'array',
        'expires_at' => 'datetime',
    ];

    /**
     * A transaction is bound to a user.
     *
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }

    /**
     * A transaction is bound to a package.
     *
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function package(): BelongsTo
    {
        return $this->belongsTo(Package::class);
    }

    /**
     * Scope the query to include pending transactions.
     */
    public function scopePending(Builder $query)
    {
        $query->where('status', 'pending')->where('expires_at', '>', now());
    }

    /**
     * Scope the query to include successful transactions.
     */
    public function scopeSuccessful(Builder $query)
    {
        $query->where('status', 'successful');
    }

    /**
     * Scope the query to include cancelled transactions.
     */
    public function scopeCancelled(Builder $query)
    {
        $query->where('status', 'cancelled');
    }

    /**
     * Scope the query to include expired transaction.
     */
    public function scopeExpired(Builder $query)
    {
        $query->where('status', 'pending')->where('expires_at', '<=', now());
    }

    /**
     * Check if the transaction is expired.
     */
    public function expired(): Attribute
    {
        return Attribute::get(function (mixed $value, array $attrs) {
            return $attrs['status'] == 'pending' && $attrs['expires_at'] <= (int) date('U');
        });
    }

    /**
     * Check if the transaction is pending.
     */
    public function pending(): Attribute
    {
        return Attribute::get(function (mixed $value, array $attrs) {
            return $attrs['status'] == 'pending' && $attrs['expires_at'] > (int) date('U');
        });
    }

    /**
     * Check if the transaction was successful.
     */
    public function successful(): Attribute
    {
        return Attribute::get(function (mixed $value, array $attrs) {
            return $attrs['status'] == 'successful' && $attrs['received'];
        });
    }

    /**
     * Check if the transaction was cancelled.
     */
    public function cancelled(): Attribute
    {
        return Attribute::get(function (mixed $value, array $attrs) {
            return $attrs['status'] == 'cancelled';
        });
    }
}
